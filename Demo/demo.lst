
demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000000da  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800108  00800108  00000176  2**0
                  ALLOC
  3 .stab         00000c60  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a22  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea ed       	ldi	r30, 0xDA	; 218
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a8 30       	cpi	r26, 0x08	; 8
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a8 e0       	ldi	r26, 0x08	; 8
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	af 30       	cpi	r26, 0x0F	; 15
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	0e d0       	rcall	.+28     	; 0x84 <main>
  68:	36 c0       	rjmp	.+108    	; 0xd6 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <setup_led>:
uint8_t green_leds[ 7 ] = { 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };


void setup_led( void ) {
    // led array columns
    DDRD |= 0x7f;        // 0b01111111
  6c:	8a b1       	in	r24, 0x0a	; 10
  6e:	8f 67       	ori	r24, 0x7F	; 127
  70:	8a b9       	out	0x0a, r24	; 10

    // led array red rows
    DDRB |= 0xf8;        // 0b11111000
  72:	84 b1       	in	r24, 0x04	; 4
  74:	88 6f       	ori	r24, 0xF8	; 248
  76:	84 b9       	out	0x04, r24	; 4

    // led array green rows
    DDRC |= 0x3e;        // 0b00111110
  78:	87 b1       	in	r24, 0x07	; 7
  7a:	8e 63       	ori	r24, 0x3E	; 62
  7c:	87 b9       	out	0x07, r24	; 7
}
  7e:	08 95       	ret

00000080 <setup_buttons>:

void setup_buttons( void ) {
}
  80:	08 95       	ret

00000082 <setup_speaker>:

void setup_speaker( void ) {
}
  82:	08 95       	ret

00000084 <main>:
uint8_t green_leds[ 7 ] = { 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000 };


void setup_led( void ) {
    // led array columns
    DDRD |= 0x7f;        // 0b01111111
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	8f 67       	ori	r24, 0x7F	; 127
  88:	8a b9       	out	0x0a, r24	; 10

    // led array red rows
    DDRB |= 0xf8;        // 0b11111000
  8a:	84 b1       	in	r24, 0x04	; 4
  8c:	88 6f       	ori	r24, 0xF8	; 248
  8e:	84 b9       	out	0x04, r24	; 4

    // led array green rows
    DDRC |= 0x3e;        // 0b00111110
  90:	87 b1       	in	r24, 0x07	; 7
  92:	8e 63       	ori	r24, 0x3E	; 62
  94:	87 b9       	out	0x07, r24	; 7
  96:	20 e0       	ldi	r18, 0x00	; 0
    setup_speaker();


    while ( 1 )  {
        for( col = 0; col < 7; col++ ) {
            PORTD = ( 1 << col );
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	70 e0       	ldi	r23, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	40 ed       	ldi	r20, 0xD0	; 208
  9e:	57 e0       	ldi	r21, 0x07	; 7
  a0:	a2 2f       	mov	r26, r18
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	cb 01       	movw	r24, r22
  a6:	02 2e       	mov	r0, r18
  a8:	02 c0       	rjmp	.+4      	; 0xae <main+0x2a>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	0a 94       	dec	r0
  b0:	e2 f7       	brpl	.-8      	; 0xaa <main+0x26>
  b2:	8b b9       	out	0x0b, r24	; 11
            PORTB = red_leds[ col ];
  b4:	fd 01       	movw	r30, r26
  b6:	e0 50       	subi	r30, 0x00	; 0
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	80 81       	ld	r24, Z
  bc:	85 b9       	out	0x05, r24	; 5
            PORTC = green_leds[ col ];
  be:	a8 5f       	subi	r26, 0xF8	; 248
  c0:	be 4f       	sbci	r27, 0xFE	; 254
  c2:	8c 91       	ld	r24, X
  c4:	88 b9       	out	0x08, r24	; 8
  c6:	ca 01       	movw	r24, r20
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x44>
    setup_buttons();
    setup_speaker();


    while ( 1 )  {
        for( col = 0; col < 7; col++ ) {
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	27 30       	cpi	r18, 0x07	; 7
  d0:	38 f3       	brcs	.-50     	; 0xa0 <main+0x1c>
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	e5 cf       	rjmp	.-54     	; 0xa0 <main+0x1c>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
